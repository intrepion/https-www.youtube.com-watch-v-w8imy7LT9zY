@page "/admin/UrlNamePlaceholder/view/{GameId:guid}"
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IPageHelper PageHelper
@inject EditSuccess EditSuccessState

<PageTitle>HumanNamePlaceholder View</PageTitle>

@if (NotFound && !Loading)
{
    <div class="alert alert-warning">Application Role with that id doesn't exist.</div>
}
else
{
    @if (Game is null || Loading)
    {
        <div class="alert alert-info">Loading...</div>
    }
    else
    {
        @* PageHeaderCodePlaceholder *@
        @* <h1>@Game.Name</h1> *@

        <br />
        @if (EditSuccess)
        {
            <div class="alert alert-success">Successfully updated the contact.</div>
        }
        <br />
        <a class="btn btn-primary" title="Go Back" href="admin/UrlNamePlaceholder/@PageHelper.Page">
            Back to Grid
        </a>
        <span>&nbsp;</span>
        @if (!Deleted)
        {
            <a class="btn btn-primary" href="admin/UrlNamePlaceholder/edit/@Game.Id" title="Edit">Edit</a>

            <span>&nbsp;</span>
            @if (!ShowConfirmation)
            {
                <button class="btn btn-danger" @onclick="@(() => { ShowConfirmation = true; EditSuccess = false; })">Delete</button>
            }
            else
            {
                <br />
                <br />
                <DeletePrompt Confirmation="@(async result => await ConfirmAsync(result))" />
            }
        }
        else
        {
            <div class="btn btn-danger">ðŸš« This item has been deleted.</div>
        }
    }
}

@code {
    // Tracking of asynchronous calls.
    private bool Loading;

    // Id from route of contact.
    [Parameter]
    public Guid GameId { get; set; }

    // Navigation check.
    private Guid _lastGameId;

    // True with redirect from successful edit.
    [Parameter]
    public bool EditSuccess { get; set; }

    // Game entity.
    private Game? Game { get; set; }

    // Set to true when not found.
    private bool NotFound = false;

    // Set to true when delete is requested.
    private bool ShowConfirmation = false;

    // Set to true when delete is successful.
    private bool Deleted = false;

    // Navigated
    protected override async Task OnParametersSetAsync()
    {
        if (_lastGameId != GameId)
        {
            EditSuccess = EditSuccessState.Success;
            EditSuccessState.Success = false;
            _lastGameId = GameId;
            await LoadGameAsync();
        }
    }

    // Confirm deletion.
    // result is True when user confirmed.
    private async Task ConfirmAsync(bool result)
    {
        if (result)
        {
            await DeleteAsync();
        }
        else
        {
            ShowConfirmation = false;
            EditSuccess = false;
        }
    }

    // Loads the contact.
    private async Task LoadGameAsync()
    {
        if (Loading)
        {
            return; //avoid concurrent requests.
        }

        NotFound = false;
        Game = null;

        Loading = true;

        using var context = DbFactory.CreateDbContext();

        if (context.TableNamePlaceholder is not null)
        {
            Game = await context.TableNamePlaceholder
                .AsNoTracking()
                .SingleOrDefaultAsync(
                    c => c.Id == GameId);

            if (Game is null)
            {
                NotFound = true;
            }
        }

        Loading = false;
    }

    // Deletes the contact.
    private async Task DeleteAsync()
    {
        if (Loading)
        {
            // Avoid concurrent requests.
            return;
        }

        Loading = true;
        using var context = DbFactory?.CreateDbContext();

        if (context?.Roles is not null)
        {
            var contact = await context.TableNamePlaceholder
                .SingleOrDefaultAsync(c => c.Id == GameId);

            if (contact is not null)
            {
                context.TableNamePlaceholder?.Remove(contact);
                await context.SaveChangesAsync();
                Loading = false;
                Deleted = true;
            }
            else
            {
                Loading = false;
                // Show not found.
                await LoadGameAsync();
            }
        }
        else
        {
            Loading = false;
            // Show not found.
            await LoadGameAsync();
        }
    }
}
