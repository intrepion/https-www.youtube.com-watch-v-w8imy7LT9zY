@page "/admin/game"
@rendermode InteractiveServer
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation

<PageTitle>Game Home</PageTitle>

<h1>Game Home</h1>
<h6><a href="/admin/game/add">Create New</a></h6>

<div class="container-fluid">
  <table class="table table-hover table-primary table-striped">
    <thead>
      <tr>
        <th>Actions</th>
        <th>Name</th>
        @* TableHeaderCodePlaceholder *@
      </tr>
    </thead>
    <tbody>
      @if (games is not null)
      {
        @foreach (var game in games)
        {
          <tr>
            <td>
              <div class="btn-group">
                <a class="btn btn-primary btn-sm btn-info" href="/admin/game/view/@game.Id" title="View">
                  <i class="bi bi-eye"></i>
                </a>
                <a class="btn btn-primary btn-sm" href="/admin/game/edit/@game.Id" title="Edit">
                  <i class="bi bi-pencil"></i>
                </a>
              </div>
            </td>
            <td>@game?.Name</td>
            @* TableRowCodePlaceholder *@
          </tr>
        }
      }
    </tbody>
  </table>
</div>

@code {
  private ICollection<Game>? games { get; set; }

  protected override async Task OnParametersSetAsync()
  {
    await ReloadAsync();
  }

  private async Task ReloadAsync()
  {
    games = new List<Game>();

    using var context = DbFactory.CreateDbContext();
    var query = context.Games?.AsQueryable();

    if (query is not null)
    {
      games = await query
        @* QueryIncludeCodePlaceholder *@
        .AsNoTracking().ToListAsync();
    }
  }
}

